#include <MFRC522v2.h>
#include <MFRC522DriverSPI.h>
#include <MFRC522DriverPinSimple.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define SDA_PIN 16
#define SCL_PIN 4
#define BUZZER 15

MFRC522DriverPinSimple ss_pin(5);
MFRC522DriverSPI driver{ss_pin};
MFRC522 mfrc522{driver};
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Define known UIDs and their corresponding names
struct Card {
  byte uid[4];
  const char* name;
};

Card cards[] = {
  {{0x63, 0x46, 0x4B, 0x28}, "Vaithesh"},
  {{0xA3, 0x05, 0x13, 0x2D}, "Ragavan"}  // Replace with actual UID if needed
};

// Remember last scanned UID
const byte MAX_UID_SIZE = 10; // safe maximum
byte lastUID[MAX_UID_SIZE] = {0};
byte lastSize = 0;

bool uidEquals(const byte *a, const byte *b, byte size) {
  for (byte i = 0; i < size; i++) {
    if (a[i] != b[i]) return false;
  }
  return true;
}

void printUIDSerial(const byte *uid, byte size) {
  Serial.print(F("Card UID: "));
  for (byte i = 0; i < size; i++) {
    if (uid[i] < 0x10) Serial.print("0");
    Serial.print(uid[i], HEX);
    if (i < size - 1) Serial.print(":");
  }
  Serial.println();
}

void setup() {
  Serial.begin(115200);
  while (!Serial);

  Wire.begin(SDA_PIN, SCL_PIN); // Initialize I2C on custom pins
  lcd.init();                    // Initialize LCD
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Log Management");
  delay(2000);
  pinMode(BUZZER, OUTPUT);
  digitalWrite(BUZZER, LOW);
  lcd.clear();

  mfrc522.PCD_Init();
  Serial.println(F("Scan a card to get its UID..."));
  lcd.setCursor(0, 0);
  lcd.print("Scan your card");
}

void loop() {
  // Wait for a new card
  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  byte uidSize = mfrc522.uid.size;
  byte *uidBytes = mfrc522.uid.uidByte;

  // Print UID to Serial
  printUIDSerial(uidBytes, uidSize);

  // Check if this is the same as last scanned UID
  if (uidSize == lastSize && uidSize > 0 && uidEquals(uidBytes, lastUID, uidSize)) {
    Serial.println("Card already used");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Card already used");
    lcd.setCursor(0,1);
    lcd.print("Try different card");
    delay(2000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Scan your card");

    // Halt PICC and return without updating lastUID
    mfrc522.PICC_HaltA();
    delay(1000);
    return;
  }

  // Normal processing: check known cards
  bool found = false;
  for (byte i = 0; i < sizeof(cards)/sizeof(cards[0]); i++) {
    bool match = true;
    // compare only up to card's uid length (we assume both are 4 here)
    for (byte j = 0; j < uidSize; j++) {
      if (j >= 4 || uidBytes[j] != cards[i].uid[j]) {
        match = false;
        break;
      }
    }

    if (match) {
      // Access granted actions
      digitalWrite(BUZZER, HIGH);
      delay(500);
      digitalWrite(BUZZER, LOW);

      Serial.print("Hello, ");
      Serial.println(cards[i].name);

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Access Granted");
      lcd.setCursor(0, 1);
      lcd.print(cards[i].name);

      found = true;
      delay(2000); // display name for 2 sec
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Scan next card");
      break;
    }
  }

  if (!found) {
    Serial.println("Unknown card");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Access Denied");
    lcd.setCursor(0, 1);
    lcd.print("Unknown Card");
    delay(2000);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Scan your card");
  }

  // Save this UID as the last scanned UID (for next comparison)
  lastSize = uidSize;
  // zero out lastUID first for safety
  for (byte z = 0; z < MAX_UID_SIZE; z++) lastUID[z] = 0;
  for (byte k = 0; k < uidSize && k < MAX_UID_SIZE; k++) lastUID[k] = uidBytes[k];

  mfrc522.PICC_HaltA();
  delay(1000);
}
